"""
title: ComfyUI ACE Step Audio Generator
description: Tool to generate songs using the ACE Step workflow via the ComfyUI API. Accepts tags and lyrics (generated by the LLM), and allows full control over the workflow JSON and node numbers. Returns a link to the generated audio or a status message.
author: Haervwe
author_url: https://github.com/Haervwe/open-webui-tools/
funding_url: https://github.com/Haervwe/open-webui-tools
version: 0.1.0
"""
from typing import Optional, Dict, Any, Callable, Awaitable
from pydantic import BaseModel, Field
import aiohttp
import json
import asyncio

class Tools:
    class Valves(BaseModel):
        comfyui_api_url: str = Field(
            default="http://localhost:8188",
            description="ComfyUI API endpoint (e.g., http://localhost:8188)",
        )
        model_name: str = Field(
            default="ACE_STEP/ace_step_v1_3.5b.safetensors",
            description="Model name to use for ACE Step audio generation.",
        )
        workflow_json: str = Field(
            default="",
            description="Full ACE Step workflow JSON as a string. Use {tags}, {lyrics}, and {model_name} as placeholders.",
        )
        tags_node: str = Field(
            default="14",
            description="Node number for the tags input.",
        )
        lyrics_node: str = Field(
            default="14",
            description="Node number for the lyrics input (if used).",
        )
        model_node: str = Field(
            default="40",
            description="Node number for the model checkpoint input.",
        )

    def __init__(self):
        self.valves = self.Valves()

    async def generate_song(
        self,
        tags: str,
        lyrics: Optional[str] = None,
        __user__: dict = {},
        __event_emitter__: Optional[Callable[[Any], Awaitable[None]]] = None,
    ) -> str:
        """
        Generate a song using the ACE Step workflow via ComfyUI API.
        Args:
            tags: Tags describing the song (generated by LLM)
            lyrics: Optional lyrics (generated by LLM)
        Returns:
            Link to generated audio or status message.
        """
        if not self.valves.workflow_json:
            return "Error: No workflow JSON provided in valves."
        try:
            workflow = json.loads(self.valves.workflow_json)
            if self.valves.tags_node in workflow:
                workflow[self.valves.tags_node]["inputs"]["tags"] = tags
            if lyrics and self.valves.lyrics_node in workflow:
                workflow[self.valves.lyrics_node]["inputs"]["lyrics"] = lyrics
            if self.valves.model_node in workflow:
                workflow[self.valves.model_node]["inputs"]["ckpt_name"] = self.valves.model_name
            payload = {"prompt": workflow}
            if __event_emitter__:
                await __event_emitter__({"type": "status", "data": {"description": "Submitting workflow to ComfyUI...", "done": False}})
            async with aiohttp.ClientSession() as session:
                # Submit the workflow
                async with session.post(f"{self.valves.comfyui_api_url}/prompt", json=payload, timeout=60) as resp:
                    if resp.status != 200:
                        return f"ComfyUI API error: {resp.status}"
                    result = await resp.json()
                    prompt_id = result.get("prompt_id") or result.get("promptID")
                    if not prompt_id:
                        return f"Failed to get prompt ID from ComfyUI response: {result}"

                # Poll for result
                history_url = f"{self.valves.comfyui_api_url}/history/{prompt_id}"
                for _ in range(240):  # Poll up to 120 times (about 2 minutes)
                    await asyncio.sleep(1)
                    async with session.get(history_url, timeout=10) as hist_resp:
                        if hist_resp.status != 200:
                            continue
                        hist = await hist_resp.json()
                        outputs = hist.get("outputs") or hist.get("output", {})
                        audio_node = "59"
                        if audio_node in outputs:
                            files = outputs[audio_node].get("files") or []
                            if files:
                                audio_url = f"{self.valves.comfyui_api_url}/view?filename={files[0]}"
                                return f"Song generated! [Download audio]({audio_url})"
                        # Optionally, emit progress
                        if __event_emitter__:
                            await __event_emitter__({"type": "status", "data": {"description": "Waiting for audio generation...", "done": False}})
                return f"Timed out waiting for song generation from ComfyUI. Last response: {hist}"
        except Exception as e:
            return f"Error during song generation: {str(e)}"
